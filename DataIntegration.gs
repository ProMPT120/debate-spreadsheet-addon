
/*
 * function to update the scoreboard sheet with data from sheet teamstats taking into account ordered placement in scoreboard.
*/ 
function updateTeamToScoreboard(currentRound){
   var scoreTeamStats = ss.getSheetByName(SHEET_TEAMSTATS);
   var range = scoreTeamStats.getRange(3, 1, TEAM_NUMBER,currentRound+2);
   var data = range.getValues();
   for(var i = 0;i<TEAM_NUMBER;i++){
    if(String(data[i][currentRound+1])==""){
      throw "Team stats in sheet TeamStats filled improperly at line: "+(i+3);
    }
   }
   var aggregate_score=createArray(TEAM_NUMBER,1);
   for(var i = 0;i<TEAM_NUMBER;i++){
     aggregate_score[i][0]=data[i][0];
     aggregate_score[i][1]=0;
     for(var j=0;j<=currentRound;j++){
     aggregate_score[i][1]+=data[i][Number(1+j)];
   }
   }
   var scoreBoardSheet = ss.getSheetByName(SHEET_SCOREBOARD);
   var range = scoreBoardSheet.getRange(4, 2, TEAM_NUMBER,2);
   var dataBS = range.getValues();
   var reordered_data=createArray(TEAM_NUMBER,1);
   for(var i = 0;i<TEAM_NUMBER;i++){
     for(var j = 0;j<TEAM_NUMBER;j++){
       if(dataBS[i][0]==aggregate_score[j][0]){
         reordered_data[i][0]=aggregate_score[j][1];          
       }
     }
   }
  ss.getSheetByName(SHEET_SCOREBOARD).getRange(4,3,reordered_data.length,1).setValues(reordered_data);
}
/*
 * function to update the scoreboard sheet with data from sheet playerstats taking into account ordered placement in scoreboard.
*/ 
function updatePlayerToScoreboard(currentRound){
   var scorePlayerStats = ss.getSheetByName(SHEET_PLAYERSTATS);
   var range = scorePlayerStats.getRange(3, 1, PLAYER_NUMBER,currentRound+5);
   var data = range.getValues();
  for(var i = 0;i<PLAYER_NUMBER;i++){
    if(String(data[i][currentRound+4])==""){
      throw "Player stats in sheet PlayerStats filled improperly at line: "+(i+3);
    }
  }
   var aggregate_score=createArray(PLAYER_NUMBER,1);
   for(var i = 0;i<PLAYER_NUMBER;i++){
     aggregate_score[i][0]=data[i][0];
     aggregate_score[i][1]=0;
     for(var j=0;j<=currentRound;j++){
     aggregate_score[i][1]+=data[i][Number(4+j)];
   }
   }
   var reduced_score=createArray(0,1);
   for(var i = 0;i<PLAYER_NUMBER;i++){
     var row = aggregate_score[i][0];
     var duplicate=false;
     for(var j in reduced_score){
       if(aggregate_score[i][0]==reduced_score[j][0]){
       duplicate=true;
       reduced_score[j][1]=Number(reduced_score[j][1])+Number(aggregate_score[i][1]);
       }
     }
     if(!duplicate){
       reduced_score.push(aggregate_score[i]);
     }
   }
  
  
   var scoreBoardSheet = ss.getSheetByName(SHEET_SCOREBOARD);
   var range = scoreBoardSheet.getRange(4, 2, TEAM_NUMBER,2);
   var dataSB = range.getValues();
   var reordered_data=createArray(TEAM_NUMBER,1);
   for(var i = 0;i<TEAM_NUMBER;i++){
     for(var j = 0;j<TEAM_NUMBER;j++){
       if(dataSB[i][0]==reduced_score[j][0]){
         reordered_data[i][0]=reduced_score[j][1]/(currentRound+1);          
       }
     }
   }
  ss.getSheetByName(SHEET_SCOREBOARD).getRange(4,4,reordered_data.length,1).setValues(reordered_data);

}


/*
 * function to update the scoreboard sheet with data from the rounds generated by pairingGenerator with 2 sides
*/ 
function updateRound2Sides(currentRound){
   /*
   Creating two list of team names for side gov or opp to add 1
   */
   var roundName=String("Round "+Number(currentRound+1));
   var scorePlayerRounds = ss.getSheetByName(roundName);
  if(!scorePlayerRounds){
    throw "Please generate round : "+roundName +" before integration";
  }
   var pairingNumber=TEAM_NUMBER/2;
   var range = scorePlayerRounds.getRange(3, 2,pairingNumber,2);
   var data = range.getValues();
   var govList=[];
   var oppList=[];
  for(var i = 0;i<pairingNumber;i++){
    govList.push(data[i][0]);
    oppList.push(data[i][1]);
  }
   var scoreBoardSheet = ss.getSheetByName(SHEET_SCOREBOARD);
   var range = scoreBoardSheet.getRange(4, 2, TEAM_NUMBER,5);
   var dataSB = range.getValues();
  updateScoreBoardSides(dataSB,govList,3);
  updateScoreBoardSides(dataSB,oppList,4);
   var reordered_data=createArray(TEAM_NUMBER,2);
   for(var i = 0;i<TEAM_NUMBER;i++){
     reordered_data[i][0]=dataSB[i][3];
     reordered_data[i][1]=dataSB[i][4];
   }
  ss.getSheetByName(SHEET_SCOREBOARD).getRange(4,5,reordered_data.length,2).setValues(reordered_data);

}
/*
 * function to add appropriately to team number opp or gov depending on index in dataSB compared to TeamNameList array
*/ 
function updateScoreBoardSides(dataSB,TeamNameList,index){
    for(var i in TeamNameList){
     for(var j=0;j<TEAM_NUMBER;j++){
         if(dataSB[j][0]==TeamNameList[i]){
         dataSB[j][index]=Number(dataSB[j][index])+1;          
       }
     }
   }
}
/*
 * function to update the scoreboard sheet with data from the rounds generated by pairingGenerator with 4 sides
*/ 
function updateRound4Sides(currentRound){
   /*
   Creating two list of team names for side gov or opp to add 1
   */
   var roundName=String("Round "+Number(currentRound+1));
   var scorePlayerRounds = ss.getSheetByName(roundName);
   var pairingNumber=TEAM_NUMBER/4;
   var range = scorePlayerRounds.getRange(3, 2,pairingNumber,4);
   var data = range.getValues();
   var OpeGovList=[];
   var OpeOppList=[];
   var CloGovList=[];
   var CloOppList=[];
  for(var i = 0;i<pairingNumber;i++){
    OpeGovList.push(data[i][0]);
    OpeOppList.push(data[i][1]);
    CloGovList.push(data[i][2]);
    CloOppList.push(data[i][3]);
  }
   var scoreBoardSheet = ss.getSheetByName(SHEET_SCOREBOARD);
   var range = scoreBoardSheet.getRange(4, 2, TEAM_NUMBER,7);
   var dataSB = range.getValues();
   updateScoreBoardSides(dataSB,OpeGovList,3);
   updateScoreBoardSides(dataSB,OpeOppList,4);
   updateScoreBoardSides(dataSB,CloGovList,5);
   updateScoreBoardSides(dataSB,CloOppList,6);
   var reordered_data=createArray(TEAM_NUMBER,4);
   for(var i = 0;i<TEAM_NUMBER;i++){
     reordered_data[i][0]=dataSB[i][3];
     reordered_data[i][1]=dataSB[i][4];
     reordered_data[i][2]=dataSB[i][5];
     reordered_data[i][3]=dataSB[i][6];
   }
  ss.getSheetByName(SHEET_SCOREBOARD).getRange(4,5,reordered_data.length,4).setValues(reordered_data);

}
/*
 * function to sort the scoreboard sheet in function of aggregate score and performance average.
*/ 
function sortScoreBoard(){
  var range=ss.getSheetByName(SHEET_SCOREBOARD).getRange(4,1,TEAM_NUMBER,4+SIDES_PER_ROUND);//Ordering playerstats by team
  range.sort([{column: 3, ascending: false}, {column: 4, ascending: false}]);
  applyAlternatingColoring(SHEET_SCOREBOARD,4,TEAM_NUMBER,4+SIDES_PER_ROUND);//sheetName,initRow,rowNum,colNum
  SpreadsheetApp.flush();
}
